{"ast":null,"code":"var _jsxFileName = \"/Users/metehan/Downloads/ord/sats-connect-example-main 2/src/components/signTransaction.tsx\";\nimport { signTransaction } from \"sats-connect\";\nimport * as btc from \"@scure/btc-signer\";\nimport { createPSBT, getUTXOs } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignTransaction = ({\n  network,\n  ordinalsAddress,\n  paymentAddress,\n  paymentPublicKey,\n  ordinalsPublicKey,\n  capabilities\n}) => {\n  const onSignTransactionClick = async () => {\n    const [paymentUnspentOutputs, ordinalsUnspentOutputs] = await Promise.all([getUTXOs(network, paymentAddress), getUTXOs(network, ordinalsAddress)]);\n    let canContinue = true;\n    if (paymentUnspentOutputs.length === 0) {\n      alert(\"No unspent outputs found for payment address\");\n      canContinue = false;\n    }\n    if (ordinalsUnspentOutputs.length === 0) {\n      alert(\"No unspent outputs found for ordinals address\");\n      canContinue = false;\n    }\n    if (!canContinue) {\n      return;\n    }\n\n    // create psbt sending from payment address to ordinals address\n    const outputRecipient1 = ordinalsAddress;\n    const outputRecipient2 = paymentAddress;\n    const psbtBase64 = await createPSBT(network, paymentPublicKey, ordinalsPublicKey, paymentUnspentOutputs, ordinalsUnspentOutputs, outputRecipient1, outputRecipient2);\n    await signTransaction({\n      payload: {\n        network: {\n          type: network\n        },\n        message: \"Sign Transaction\",\n        psbtBase64,\n        broadcast: false,\n        inputsToSign: [{\n          address: paymentAddress,\n          signingIndexes: [0],\n          sigHash: btc.SignatureHash.SINGLE | btc.SignatureHash.ANYONECANPAY\n        }, {\n          address: ordinalsAddress,\n          signingIndexes: [1],\n          sigHash: btc.SignatureHash.SINGLE | btc.SignatureHash.ANYONECANPAY\n        }]\n      },\n      onFinish: response => {\n        alert(response.psbtBase64);\n      },\n      onCancel: () => alert(\"Canceled\")\n    });\n  };\n  if (!capabilities.has(\"signTransaction\")) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Sign transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"The wallet does not support this feature\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sign transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Creates a PSBT sending the first UTXO from each of the payment and ordinal addresses to the other address, with the change going to the payment address.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onSignTransactionClick,\n        children: \"Sign Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_c = SignTransaction;\nexport default SignTransaction;\nvar _c;\n$RefreshReg$(_c, \"SignTransaction\");","map":{"version":3,"names":["signTransaction","btc","createPSBT","getUTXOs","jsxDEV","_jsxDEV","SignTransaction","network","ordinalsAddress","paymentAddress","paymentPublicKey","ordinalsPublicKey","capabilities","onSignTransactionClick","paymentUnspentOutputs","ordinalsUnspentOutputs","Promise","all","canContinue","length","alert","outputRecipient1","outputRecipient2","psbtBase64","payload","type","message","broadcast","inputsToSign","address","signingIndexes","sigHash","SignatureHash","SINGLE","ANYONECANPAY","onFinish","response","onCancel","has","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/metehan/Downloads/ord/sats-connect-example-main 2/src/components/signTransaction.tsx"],"sourcesContent":["import type { Capability } from \"sats-connect\";\nimport { BitcoinNetworkType, signTransaction } from \"sats-connect\";\n\nimport * as btc from \"@scure/btc-signer\";\n\nimport { createPSBT, getUTXOs } from \"../utils\";\n\ntype Props = {\n  network: BitcoinNetworkType;\n  ordinalsAddress: string;\n  paymentAddress: string;\n  paymentPublicKey: string;\n  ordinalsPublicKey: string;\n  capabilities: Set<Capability>;\n};\n\nconst SignTransaction = ({\n  network,\n  ordinalsAddress,\n  paymentAddress,\n  paymentPublicKey,\n  ordinalsPublicKey,\n  capabilities,\n}: Props) => {\n  const onSignTransactionClick = async () => {\n    const [paymentUnspentOutputs, ordinalsUnspentOutputs] = await Promise.all([\n      getUTXOs(network, paymentAddress),\n      getUTXOs(network, ordinalsAddress),\n    ]);\n\n    let canContinue = true;\n\n    if (paymentUnspentOutputs.length === 0) {\n      alert(\"No unspent outputs found for payment address\");\n      canContinue = false;\n    }\n\n    if (ordinalsUnspentOutputs.length === 0) {\n      alert(\"No unspent outputs found for ordinals address\");\n      canContinue = false;\n    }\n\n    if (!canContinue) {\n      return;\n    }\n\n    // create psbt sending from payment address to ordinals address\n    const outputRecipient1 = ordinalsAddress;\n    const outputRecipient2 = paymentAddress;\n\n    const psbtBase64 = await createPSBT(\n      network,\n      paymentPublicKey,\n      ordinalsPublicKey,\n      paymentUnspentOutputs,\n      ordinalsUnspentOutputs,\n      outputRecipient1,\n      outputRecipient2\n    );\n\n    await signTransaction({\n      payload: {\n        network: {\n          type: network,\n        },\n        message: \"Sign Transaction\",\n        psbtBase64,\n        broadcast: false,\n        inputsToSign: [\n          {\n            address: paymentAddress,\n            signingIndexes: [0],\n            sigHash: btc.SignatureHash.SINGLE | btc.SignatureHash.ANYONECANPAY,\n          },\n          {\n            address: ordinalsAddress,\n            signingIndexes: [1],\n            sigHash: btc.SignatureHash.SINGLE | btc.SignatureHash.ANYONECANPAY,\n          },\n        ],\n      },\n      onFinish: (response) => {\n        alert(response.psbtBase64);\n      },\n      onCancel: () => alert(\"Canceled\"),\n    });\n  };\n\n  if (!capabilities.has(\"signTransaction\")) {\n    return (\n      <div className=\"container\">\n        <h3>Sign transaction</h3>\n        <b>The wallet does not support this feature</b>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <h3>Sign transaction</h3>\n      <p>\n        Creates a PSBT sending the first UTXO from each of the payment and\n        ordinal addresses to the other address, with the change going to the\n        payment address.\n      </p>\n      <div>\n        <button onClick={onSignTransactionClick}>Sign Transaction</button>\n      </div>\n    </div>\n  );\n};\n\nexport default SignTransaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}