{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInscription = exports.validateInscriptionPayload = void 0;\nconst jsontokens_1 = require(\"jsontokens\");\nconst provider_1 = require(\"../provider\");\nconst MAX_CONTENT_LENGTH_MAINNET = 400e3; // 400kb is the max miners will mine\nconst MAX_CONTENT_LENGTH_TESTNET = 60e3; // 60kb limit on Testnet to prevent spam\nconst validateInscriptionPayload = payload => {\n  const {\n    contentType,\n    content,\n    payloadType,\n    network,\n    appFeeAddress,\n    appFee\n  } = payload;\n  if (!/^[a-z]+\\/[a-z0-9\\-\\.\\+]+(?=;.*|$)/.test(contentType)) {\n    throw new Error('Invalid content type detected');\n  }\n  if (!content || content.length === 0) {\n    throw new Error('Empty content not allowed');\n  }\n  if (!payloadType || payloadType !== 'BASE_64' && payloadType !== 'PLAIN_TEXT') {\n    throw new Error('Empty invalid payloadType specified');\n  }\n  if (content.length > (network.type === 'Mainnet' ? MAX_CONTENT_LENGTH_MAINNET : MAX_CONTENT_LENGTH_TESTNET)) {\n    throw new Error('Content too large');\n  }\n  if ((appFeeAddress?.length ?? 0) > 0 && (appFee ?? 0) <= 0) {\n    throw new Error('Invalid combination of app fee address and fee provided');\n  }\n};\nexports.validateInscriptionPayload = validateInscriptionPayload;\nconst createInscription = async options => {\n  const {\n    getProvider\n  } = options;\n  const provider = await (0, provider_1.getProviderOrThrow)(getProvider);\n  (0, exports.validateInscriptionPayload)(options.payload);\n  try {\n    const request = (0, jsontokens_1.createUnsecuredToken)(options.payload);\n    const response = await provider.createInscription(request);\n    options.onFinish?.(response);\n  } catch (error) {\n    console.error('[Connect] Error during create inscription', error);\n    options.onCancel?.();\n  }\n};\nexports.createInscription = createInscription;\n//# sourceMappingURL=createInscription.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}