{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/metehan/Downloads/ord/sats-connect-example-main 2/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/metehan/Downloads/ord/sats-connect-example-main 2/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendBtcTransaction = void 0;\nvar jsontokens_1 = require(\"jsontokens\");\nvar provider_1 = require(\"../provider\");\nvar serializer = function serializer(recipient) {\n  return recipient.map(function (value) {\n    var address = value.address,\n      amountSats = value.amountSats;\n    return {\n      address: address,\n      amountSats: amountSats.toString()\n    };\n  });\n};\nvar sendBtcTransaction = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n    var provider, _options$payload, recipients, senderAddress, network, message, _options$onFinish, serializedRecipients, serializedPayload, request, response, _options$onCancel;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return (0, provider_1.getProviderOrThrow)(options.getProvider);\n        case 2:\n          provider = _context.sent;\n          _options$payload = options.payload, recipients = _options$payload.recipients, senderAddress = _options$payload.senderAddress, network = _options$payload.network, message = _options$payload.message;\n          if (!(!recipients || recipients.length === 0)) {\n            _context.next = 6;\n            break;\n          }\n          throw new Error('At least one recipient is required');\n        case 6:\n          if (!recipients.some(function (item) {\n            return typeof item.address !== 'string' || typeof item.amountSats !== 'bigint';\n          })) {\n            _context.next = 8;\n            break;\n          }\n          throw new Error('Incorrect recipient format');\n        case 8:\n          if (senderAddress) {\n            _context.next = 10;\n            break;\n          }\n          throw new Error('The sender address is required');\n        case 10:\n          _context.prev = 10;\n          serializedRecipients = serializer(recipients);\n          serializedPayload = {\n            network: network,\n            senderAddress: senderAddress,\n            message: message,\n            recipients: serializedRecipients\n          };\n          request = (0, jsontokens_1.createUnsecuredToken)(serializedPayload);\n          _context.next = 16;\n          return provider.sendBtcTransaction(request);\n        case 16:\n          response = _context.sent;\n          (_options$onFinish = options.onFinish) === null || _options$onFinish === void 0 || _options$onFinish.call(options, response);\n          _context.next = 24;\n          break;\n        case 20:\n          _context.prev = 20;\n          _context.t0 = _context[\"catch\"](10);\n          console.error('[Connect] Error during send BTC transaction request', _context.t0);\n          (_options$onCancel = options.onCancel) === null || _options$onCancel === void 0 || _options$onCancel.call(options);\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[10, 20]]);\n  }));\n  return function sendBtcTransaction(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.sendBtcTransaction = sendBtcTransaction;\n//# sourceMappingURL=sendBtcTransaction.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}