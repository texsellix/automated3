{"ast":null,"code":"import _classCallCheck from \"/Users/metehan/Downloads/ord/sats-connect-example-main 2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/metehan/Downloads/ord/sats-connect-example-main 2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/metehan/Downloads/ord/sats-connect-example-main 2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/metehan/Downloads/ord/sats-connect-example-main 2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nvar u8a = function u8a(a) {\n  return a instanceof Uint8Array;\n};\n// Cast array to different type\nexport var u8 = function u8(arr) {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n};\nexport var u32 = function u32(arr) {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n};\n// Cast array to view\nexport var createView = function createView(arr) {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n};\n// The rotate right (circular right shift) operation for uint32\nexport var rotr = function rotr(word, shift) {\n  return word << 32 - shift | word >>> shift;\n};\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport var isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\nvar hexes = /* @__PURE__ */Array.from({\n  length: 256\n}, function (_, i) {\n  return i.toString(16).padStart(2, '0');\n});\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  var hex = '';\n  for (var i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  var len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  var array = new Uint8Array(len / 2);\n  for (var i = 0; i < array.length; i++) {\n    var j = i * 2;\n    var hexByte = hex.slice(j, j + 2);\n    var byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport var nextTick = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function nextTick() {\n    return _ref.apply(this, arguments);\n  };\n}();\n// Returns control to thread each 'tick' ms to avoid blocking\nexport function asyncLoop(_x, _x2, _x3) {\n  return _asyncLoop.apply(this, arguments);\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction _asyncLoop() {\n  _asyncLoop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(iters, tick, cb) {\n    var ts, i, diff;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          ts = Date.now();\n          i = 0;\n        case 2:\n          if (!(i < iters)) {\n            _context2.next = 13;\n            break;\n          }\n          cb(i);\n          // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n          diff = Date.now() - ts;\n          if (!(diff >= 0 && diff < tick)) {\n            _context2.next = 7;\n            break;\n          }\n          return _context2.abrupt(\"continue\", 10);\n        case 7:\n          _context2.next = 9;\n          return nextTick();\n        case 9:\n          ts += diff;\n        case 10:\n          i++;\n          _context2.next = 2;\n          break;\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _asyncLoop.apply(this, arguments);\n}\nexport function utf8ToBytes(str) {\n  if (typeof str !== 'string') throw new Error(\"utf8ToBytes expected string, got \".concat(typeof str));\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(\"expected Uint8Array, got \".concat(typeof data));\n  return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  var r = new Uint8Array(arrays.reduce(function (sum, a) {\n    return sum + a.length;\n  }, 0));\n  var pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach(function (a) {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n// For runtime check if class implements interface\nexport var Hash = /*#__PURE__*/function () {\n  function Hash() {\n    _classCallCheck(this, Hash);\n  }\n  _createClass(Hash, [{\n    key: \"clone\",\n    value:\n    // Safe version that clones internal state\n    function clone() {\n      return this._cloneInto();\n    }\n  }]);\n  return Hash;\n}();\nvar toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]') throw new Error('Options should be object or undefined');\n  var merged = Object.assign(defaults, opts);\n  return merged;\n}\nexport function wrapConstructor(hashCons) {\n  var hashC = function hashC(msg) {\n    return hashCons().update(toBytes(msg)).digest();\n  };\n  var tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = function () {\n    return hashCons();\n  };\n  return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n  var hashC = function hashC(msg, opts) {\n    return hashCons(opts).update(toBytes(msg)).digest();\n  };\n  var tmp = hashCons({});\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = function (opts) {\n    return hashCons(opts);\n  };\n  return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n  var hashC = function hashC(msg, opts) {\n    return hashCons(opts).update(toBytes(msg)).digest();\n  };\n  var tmp = hashCons({});\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = function (opts) {\n    return hashCons(opts);\n  };\n  return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes() {\n  var bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}