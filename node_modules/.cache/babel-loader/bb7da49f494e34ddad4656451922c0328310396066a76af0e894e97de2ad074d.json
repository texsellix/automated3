{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCapabilities = void 0;\nconst jsontokens_1 = require(\"jsontokens\");\nconst provider_1 = require(\"../provider\");\nconst extractOrValidateCapabilities = (provider, reportedCapabilities) => {\n  const validateCapability = capability => {\n    if (!provider[capability]) {\n      return false;\n    }\n    // The provider might have the method implemented but not ready for use\n    if (reportedCapabilities && !reportedCapabilities.has(capability)) {\n      return false;\n    }\n    return true;\n  };\n  const capabilityMap = {\n    call: validateCapability('call'),\n    connect: validateCapability('connect'),\n    signMessage: validateCapability('signMessage'),\n    signTransaction: validateCapability('signTransaction'),\n    sendBtcTransaction: validateCapability('sendBtcTransaction'),\n    createInscription: validateCapability('createInscription')\n  };\n  return Object.entries(capabilityMap).reduce((acc, [capability, value]) => {\n    if (value) return [...acc, capability];\n    return acc;\n  }, []);\n};\nconst getCapabilities = async options => {\n  const provider = await (0, provider_1.getProviderOrThrow)(options.getProvider);\n  const request = (0, jsontokens_1.createUnsecuredToken)(options.payload);\n  if (provider.getCapabilities) {\n    try {\n      const response = await provider.getCapabilities(request);\n      options.onFinish?.(extractOrValidateCapabilities(provider, new Set(response)));\n    } catch (error) {\n      console.error('[Connect] Error during capabilities request', error);\n    }\n  }\n  try {\n    const inferredCapabilities = extractOrValidateCapabilities(provider);\n    options.onFinish?.(inferredCapabilities);\n  } catch (error) {\n    console.error('[Connect] Error during capabilities request', error);\n    options.onCancel?.();\n  }\n};\nexports.getCapabilities = getCapabilities;\n__exportStar(require(\"./types\"), exports);\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}