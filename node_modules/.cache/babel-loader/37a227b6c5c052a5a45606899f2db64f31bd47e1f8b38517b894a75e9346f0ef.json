{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/metehan/Downloads/ord/sats-connect-example-main 2/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/metehan/Downloads/ord/sats-connect-example-main 2/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInscription = exports.validateInscriptionPayload = void 0;\nvar jsontokens_1 = require(\"jsontokens\");\nvar provider_1 = require(\"../provider\");\nvar MAX_CONTENT_LENGTH_MAINNET = 400e3; // 400kb is the max miners will mine\nvar MAX_CONTENT_LENGTH_TESTNET = 60e3; // 60kb limit on Testnet to prevent spam\nvar validateInscriptionPayload = function validateInscriptionPayload(payload) {\n  var _appFeeAddress$length;\n  var contentType = payload.contentType,\n    content = payload.content,\n    payloadType = payload.payloadType,\n    network = payload.network,\n    appFeeAddress = payload.appFeeAddress,\n    appFee = payload.appFee;\n  if (!/^[a-z]+\\/[a-z0-9\\-\\.\\+]+(?=;.*|$)/.test(contentType)) {\n    throw new Error('Invalid content type detected');\n  }\n  if (!content || content.length === 0) {\n    throw new Error('Empty content not allowed');\n  }\n  if (!payloadType || payloadType !== 'BASE_64' && payloadType !== 'PLAIN_TEXT') {\n    throw new Error('Empty invalid payloadType specified');\n  }\n  if (content.length > (network.type === 'Mainnet' ? MAX_CONTENT_LENGTH_MAINNET : MAX_CONTENT_LENGTH_TESTNET)) {\n    throw new Error('Content too large');\n  }\n  if (((_appFeeAddress$length = appFeeAddress === null || appFeeAddress === void 0 ? void 0 : appFeeAddress.length) !== null && _appFeeAddress$length !== void 0 ? _appFeeAddress$length : 0) > 0 && (appFee !== null && appFee !== void 0 ? appFee : 0) <= 0) {\n    throw new Error('Invalid combination of app fee address and fee provided');\n  }\n};\nexports.validateInscriptionPayload = validateInscriptionPayload;\nvar createInscription = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n    var getProvider, provider, _options$onFinish, request, response, _options$onCancel;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          getProvider = options.getProvider;\n          _context.next = 3;\n          return (0, provider_1.getProviderOrThrow)(getProvider);\n        case 3:\n          provider = _context.sent;\n          (0, exports.validateInscriptionPayload)(options.payload);\n          _context.prev = 5;\n          request = (0, jsontokens_1.createUnsecuredToken)(options.payload);\n          _context.next = 9;\n          return provider.createInscription(request);\n        case 9:\n          response = _context.sent;\n          (_options$onFinish = options.onFinish) === null || _options$onFinish === void 0 || _options$onFinish.call(options, response);\n          _context.next = 17;\n          break;\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](5);\n          console.error('[Connect] Error during create inscription', _context.t0);\n          (_options$onCancel = options.onCancel) === null || _options$onCancel === void 0 || _options$onCancel.call(options);\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[5, 13]]);\n  }));\n  return function createInscription(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.createInscription = createInscription;\n//# sourceMappingURL=createInscription.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}