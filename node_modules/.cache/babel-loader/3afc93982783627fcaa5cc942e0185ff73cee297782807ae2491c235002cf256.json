{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SECP256K1Client = void 0;\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst secp = require(\"@noble/secp256k1\");\nconst ecdsaSigFormatter_1 = require(\"../ecdsaSigFormatter\");\nconst errors_1 = require(\"../errors\");\nconst utils_1 = require(\"@noble/hashes/utils\");\n// required to use noble secp https://github.com/paulmillr/noble-secp256k1\nsecp.utils.hmacSha256Sync = (key, ...msgs) => {\n  const h = hmac_1.hmac.create(sha256_1.sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\nclass SECP256K1Client {\n  static derivePublicKey(privateKey, compressed = true) {\n    if (privateKey.length === 66) {\n      privateKey = privateKey.slice(0, 64);\n    }\n    if (privateKey.length < 64) {\n      // backward compatibly accept too short private keys\n      privateKey = privateKey.padStart(64, '0');\n    }\n    return (0, utils_1.bytesToHex)(secp.getPublicKey(privateKey, compressed));\n  }\n  static signHash(signingInputHash, privateKey, format = 'jose') {\n    // make sure the required parameters are provided\n    if (!signingInputHash || !privateKey) {\n      throw new errors_1.MissingParametersError('a signing input hash and private key are all required');\n    }\n    const derSignature = secp.signSync(signingInputHash, privateKey.slice(0, 64), {\n      der: true,\n      canonical: false\n    });\n    if (format === 'der') return (0, utils_1.bytesToHex)(derSignature);\n    if (format === 'jose') return (0, ecdsaSigFormatter_1.derToJose)(derSignature, 'ES256');\n    throw Error('Invalid signature format');\n  }\n  static loadSignature(joseSignature) {\n    // create and return the DER-formatted signature bytes\n    return (0, ecdsaSigFormatter_1.joseToDer)(joseSignature, 'ES256');\n  }\n  static verifyHash(signingInputHash, derSignatureBytes, publicKey) {\n    // make sure the required parameters are provided\n    if (!signingInputHash || !derSignatureBytes || !publicKey) {\n      throw new errors_1.MissingParametersError('a signing input hash, der signature, and public key are all required');\n    }\n    return secp.verify(derSignatureBytes, signingInputHash, publicKey, {\n      strict: false\n    });\n  }\n}\nexports.SECP256K1Client = SECP256K1Client;\nSECP256K1Client.algorithmName = 'ES256K';\n//# sourceMappingURL=secp256k1.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}