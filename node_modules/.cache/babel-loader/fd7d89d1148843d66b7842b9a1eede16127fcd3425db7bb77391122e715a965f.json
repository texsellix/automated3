{"ast":null,"code":"import _regeneratorRuntime from\"/Users/metehan/Downloads/ord/sats-connect-example-main 2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/metehan/Downloads/ord/sats-connect-example-main 2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{base64,hex}from\"@scure/base\";import*as btc from\"@scure/btc-signer\";import{BitcoinNetworkType}from\"sats-connect\";export var getUTXOs=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(network,address){var networkSubpath,url,response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:networkSubpath=network===BitcoinNetworkType.Testnet?\"/testnet\":\"\";url=\"https://mempool.space\".concat(networkSubpath,\"/api/address/\").concat(address,\"/utxo\");_context.next=4;return fetch(url);case 4:response=_context.sent;return _context.abrupt(\"return\",response.json());case 6:case\"end\":return _context.stop();}},_callee);}));return function getUTXOs(_x,_x2){return _ref.apply(this,arguments);};}();export var createPSBT=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(networkType,paymentPublicKeyString,ordinalsPublicKeyString,paymentUnspentOutputs,ordinalsUnspentOutputs,recipient1,recipient2){var network,paymentOutput,ordinalOutput,paymentPublicKey,ordinalPublicKey,tx,p2wpkh,p2sh,p2tr,fee,recipient1Amount,recipient2Amount,total,changeAmount,psbt,psbtB64;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:network=networkType===BitcoinNetworkType.Testnet?btc.TEST_NETWORK:btc.NETWORK;// choose first unspent output\npaymentOutput=paymentUnspentOutputs[0];ordinalOutput=ordinalsUnspentOutputs[0];paymentPublicKey=hex.decode(paymentPublicKeyString);ordinalPublicKey=hex.decode(ordinalsPublicKeyString);tx=new btc.Transaction({allowUnknownOutputs:true});// create segwit spend\np2wpkh=btc.p2wpkh(paymentPublicKey,network);p2sh=btc.p2sh(p2wpkh,network);// create taproot spend\np2tr=btc.p2tr(ordinalPublicKey,undefined,network);// set transfer amount and calculate change\nfee=300n;// set the miner fee amount\nrecipient1Amount=BigInt(Math.min(paymentOutput.value,3000))-fee;recipient2Amount=BigInt(Math.min(ordinalOutput.value,3000));total=recipient1Amount+recipient2Amount;changeAmount=BigInt(paymentOutput.value)+BigInt(ordinalOutput.value)-total-fee;// payment input\ntx.addInput({txid:paymentOutput.txid,index:paymentOutput.vout,witnessUtxo:{script:p2sh.script?p2sh.script:Buffer.alloc(0),amount:BigInt(paymentOutput.value)},redeemScript:p2sh.redeemScript?p2sh.redeemScript:Buffer.alloc(0),witnessScript:p2sh.witnessScript,sighashType:btc.SignatureHash.SINGLE|btc.SignatureHash.ANYONECANPAY});// ordinals input\ntx.addInput({txid:ordinalOutput.txid,index:ordinalOutput.vout,witnessUtxo:{script:p2tr.script,amount:BigInt(ordinalOutput.value)},tapInternalKey:ordinalPublicKey,sighashType:btc.SignatureHash.SINGLE|btc.SignatureHash.ANYONECANPAY});tx.addOutputAddress(recipient1,recipient1Amount,network);tx.addOutputAddress(recipient2,recipient2Amount,network);tx.addOutputAddress(recipient2,changeAmount,network);tx.addOutput({script:btc.Script.encode([\"HASH160\",\"DUP\",new TextEncoder().encode(\"SP1KSN9GZ21F4B3DZD4TQ9JZXKFTZE3WW5GXREQKX\")]),amount:0n});psbt=tx.toPSBT(0);psbtB64=base64.encode(psbt);return _context2.abrupt(\"return\",psbtB64);case 23:case\"end\":return _context2.stop();}},_callee2);}));return function createPSBT(_x3,_x4,_x5,_x6,_x7,_x8,_x9){return _ref2.apply(this,arguments);};}();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}